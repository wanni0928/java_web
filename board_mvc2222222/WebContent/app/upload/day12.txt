MVC
	[jsp 방식]
		a.jsp --> b.jsp --> c.jsp
		
		각 페이지마다 필요시 자바 코드가 작성되며, DB와 연결하는 코드도 jsp파일안에서
		모두 작성된다. 분리되어 있지 않기 때문에 소규모 프로젝트에 어울리는 방식이며
		가독성이 떨어지고 분업과 유지보수가 좋지 않다.
		
	[model1 방식]
		a.jsp --> b.jsp --> c.jsp
			↑
			dao, vo

		b.jsp에서 dao를 호출함으로써 자바코드가 섞이게 된다.
		선언은 분리되어 java페이지에 구현이 되어 있어서 jsp내의 java코드 양이 줄어들었지만
		페이지가 확장될수록 유지보수가 상대적으로 좋지 않다.

	[model2 방식]		      1.Redirect, 2.Forward
		a.jsp --> web.xml --> Controller ---------> c.jsp
				   ①↓↑④	      ↑
				   000Action -------------┘
				   ②↓↑③	④
				   DAO, Bean

	a.jsp에서 다음 페이지를 이동하기 전 필요한 비지니스 로직을 완벽히 분리하여 관리한다.
	사용자가 정의한 확장자(.me, .bo,...)를 페이지 이동 주소에 작성하게 되면 서블릿이
	web.xml에 가서 가야할 경로를 찾는다. web.xml에 파일 경로를 하나씩 모두 만들게 되면
	코드가 길어지기 때문에 *.me 방법을 사용해서 .me가 붙은 모든 요청을 하나의 경로로
	보내주도록 설정해놓는다. 이 경로를 Controller로 설정해 놓고, Controller에서는 들어온
	요청에서 .me앞에 있는 요청명으로 어떤 로직을 수행할지 판단하도록 분기처리를 한다.
	비지니스 로직을 Controller안에서 작업하게 되면 마찬가지로 코드가 길어지고 유지보수
	및 재사용이 어렵기 때문에 요청별 Action을 만들어서 execute()메소드를 재정의하도록
	설계한다. 하지만 execute()메소드를 모든 Action에 구현해야하기 때문에 Action 인터페이스안에
	추상 메소드 형태로 execute()를 선언해 놓고 각 Action들에게 implement하여 구현한다.
	execute()내부에서의 작업들을 DAO에 메소드로 구현해 놓고 사용한다.
	비지니스 로직이 모두 완료되면 페이지 이동을 할 것인지, 어떤 방식(위의 그림 1, 2)으로 할 것인지,
	그리고 어디로 이동할 것인지를 결정해서 리턴해야한다. 이 값을 담을 객체를 만들어서
	관리하고, ActionForward라는 클래스 필드에 구현한다. execute()메소드의 리턴 타입은
	ActionForward가 되고 결과값이 담기면 Controller로 리턴해준다.
	Controller에서는 ActionForward객체에 담긴 결과에 맞게 처리한 후 view로 이동하게 된다.

	위의 설명처럼 설계가 굉장히 복잡하기 때문에 대규모가 아닌 소규모 프로젝트에 반영했을 때에는
	오히려 좋지 않은 결과를 초래한다. 따라서 맞는 목적으로 선택하여 설계해야한다.

	medel2의 전송방식
		JSP와 Servlet에서 페이지 이동을 처리할 때 두 가지 방식 중 하나를 사용한다.

		- Redirect
		Web Browser --> 결제 페이지(현재 페이지) --> 새로고침 --> 결제 페이지(새 페이지)

		클라이언트가 요청했을 때 이전의 값이 남아있지 않도록 하기 위해 사용한다.
		회원가입, 로그인, 글 작성, 결제 등	

		- Forward
		Web Browser --> 검색 페이지(현재 페이지) --> 검색 결과 페이지(검색한 키워드값유지)
		
		클라이언트가 request 객체를 통해 값을 넘겨주어야 할 때 혹은
		단순 조회를 요청할 때 사용한다. Redirect보다 성능이 좋다.
		목록, 검색 등
--------------------------------------------------------------------------------------------------------------------------




























