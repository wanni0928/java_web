내장 객체
	객체화 없이 사용할 수 있는 객체이며, jsp파일이 서블릿으로
	변환될 때 웹 컨테이너가 자동으로 메모리에 할당하며
	제공한다.

	request : 웹 브라우저의 요청 정보를 저장
	response : 웹 브라우저 요청에 대한 응답 정보를 저장
	out : JSP 페이지 body에 출력할 내용 정보를 저장
	session : 하나의 웹 브라우저의 정보를 유지하기 위한 세션 정보를 저장
	pageContext : JSP 페이지에 대한 정보를 저장
	config : JSP 페이지에 대한 설정 정보를 저장
	exception : JSP 페이지에 예외가 발생한 경우 사용되는 객체

GET 방식과 POST 방식
-GET
	주소에 데이터를 추가하여 전달하는 방식.
	보통 쿼리 문자열(query string)에 포함되어 전송되므로, 길이의 제한이 있으며,
	주소에 데이터가 보이므로 보안상 취약점이 존재한다.
	중요한 데이터는 POST 방식을 사용해서 요청하는 것이 좋다.

-POST
	데이터를 별도로 첨부하여 전달하는 방식.
	브라우저 히스토리에도 남지 않고 데이터는 쿼리 문자열과는 별도로 전송된다.
	따라서 데이터의 길이에 대한 제한도 없으며, GET 방식보다 보안성이 높다.
	하지만 GET 방식보다 상대적으로 느리다.

전송할 데이터의 양이 작고 노출되어도 무방하다면 GET 방식을 사용하고
전송할 데이터의 양이 크거나 노출이 되면 안될 데이터라면 POST 방식을 사용한다.
-----------------------------------------------------------------------------------------------
Ajax(Asynchronous JavaScript and XML)
	빠르게 동작하는 웹 페이지를 만들기 위한 개발 기법이다.
	Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의 일부분만을 갱신할 수
	있고, 백그라운드 영역에서 서버와 통신하여, 그 결과를 웹 페이지의 일부분에만
	표시할 수 있다. 이 때 서버와 데이터를 주고 받을 수 있는데 대표적인 데이터는
	JSON, XML, HTML, 텍스트파일 등이 있다.

Ajax의 장점
	1. 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지 일부분만을 갱신할 수 있다.
	2. 웹 페이지가 로드된 후에 서버로 데이터 요청을 보내거나 받을 수 있다.
	3. 다양한 UI(동적 페이지)의 다양한 구현이 가능해진다.

Ajax의 단점
	1. 페이지의 이동이 없기 때문에 히스토리 관리가 안된다.
	2. 반복적인 데이터를 요청하면 느려지거나 작동하지 않게 된다.
	3. 페이지의 이동이 없다는 것은 보안상의 문제도 발생할 수 있다는 것이다.

Ajax 구성 요소
	- 웹 페이지의 표현을 위한 HTML과 CSS
	- 데이터의 교환을 위한 JSON이나 XML
	- 데이터에 접근하거나 화면 구성을 동적으로 조작하기 위해 사용되는 DOM 모델
	- 웹 서버와의 비동기식 통신을 위한 XMLHttpRequest 객체
	- 위에서 언급한 모든 기술을 결합하여 사용자의 작업 흐름을 제어하는 데
	  사용되는 자바스크립트

XMLHttpRequest 객체
	Ajax의 가장 핵심적인 구성 요소는 바로 XMLHttpRequest 객체이다.
	이 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용된다.
	웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로
	XMLHttpRequest 객체를 사용하기 때문이다.

XMLHttpRequest 객체의 생성
	var 변수이름 = new XMLHttpRequest();






































