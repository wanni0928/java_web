쿠키와 세션
	- 쿠키(Cookie)
		웹 브라우저가 보관하고 있는 데이터로, 웹 서버에
		요청을 보낼 때 쿠키를 헤더에 담아서 전송한다.
	
	장단점
		- 클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
		- 정보가 사용자 컴퓨터에 저장되기 때문에 보안에 위협을 받을 수 있다.
		- 데이터 저장 용량에 한계가 있다(소용량). 과자부스러기(쿠키)처럼 작은 값!
		- 일반 사용자가 브라우저 내의 기능인 "쿠키 차단"을 사용했을 경우 쿠키는 무용지물.

	
	1. 동작 방식
		1) 쿠키 생성 : 웹 서버에서 쿠키를 생성하고 쿠키에 응답 데이터를 담아서 웹 브라우저에 전송한다.
		2) 쿠키 저장 : 웹 브라우저는 응답 데이터를 담고 있는 쿠키를 메모리나 파일로 저장한다.
		3) 쿠키 전송 : 웹 브라우저는 쿠키 요청이 있을 때마다 웹 서버에 전송한다. 웹 서버는 쿠키를 사용해서
			     필요한 작업을 수행할 수 있다.

	2 쿠키 생성 및 사용방식
		1) 쿠키 생성하고 response객체에 담는다(이미 쿠키이름이 존재하면 값 수정)
			Cookie cookie =new Cookie("쿠키이름", "쿠키값");
			response.addCookie(cookie);

			*한글이 깨질 때(인코딩이 필요할 때)
			String str = URLEncoder.encode("값", "UTF-8");
			Cookie cookie =new Cookie("쿠키이름", str);
			response.addCookie(cookie);
		
		2) 쿠키유무를 확인 후 쿠키의 값을 얻어온다.
			String cookie_check = request.getHeader("Cookie");
			if(cookie_check != null){
				Cookie[] cookies = request.getCookies();
				for(Cookie cookie : cookies){
					cookie.getName();	//쿠키 이름
					cookie.getValue();	//쿠키 값
				}
			}

		3) 쿠키를 삭제한다.
			String cookie_check = request.getHeader("Cookie");
			if(cookie_check != null){
				Cookie[] cookies = request.getCookies();
				for(Cookie cookie : cookies){
					cookie.setMaxAge(0)	//초단위로 지정하고, 음수를 입력하면
								//브라우저 종료시 쿠키 삭제(default)
				}
			}

* 쿠키 실습
	setCookie.jsp, getCookie1.jsp, getCookie2.jsp, delete_check.jsp

	setCookie.jsp : 쿠키 생성		id : "apple", getCookie1.jsp로 전송
	getCookie1.jsp : 쿠키 출력 및 수정	쿠키 값 body에 출력, id : "banana"로 수정, getCookie2.jsp로 전송
	getCookie2.jsp : 쿠키 출력 및 삭제	수정한 값 body에 출력, 쿠키 삭제, delete_check.jsp로 전송
	delete_check.jsp : 쿠키 삭제 유무 판단	삭제되었을 때 알맞은 메세지 출력


- 세션(Session)
	내장객체로서 브라우저마다 한 개씩 존재하고, 고유한 SessionID생성 후 정보를 추출한다.
	
	장단점
		JSP에서만 접근할 수 있기 때문에 보안성이 좋고, 저장 용량의 한계가 거의 없다.
		서버에 데이터를 저장하므로 서버에 부하가 걸릴 수 있다.

* 쿠키보다 세션을 쓰는 것이 더 안정적이고 안전하다.






























		